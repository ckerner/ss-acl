#!/usr/bin/env python
"""
We needed to be able to modify SpectrumScale ACLs easily and in parallel, and
the interface provided by IBM, namely mmgetacl and mmputacl are less that
friendly when it comes to parsing millions of files and maintaining ACLs on
them.

The source for this is publicly available at:
          github: https://github.com/ckerner/ssacl.git

Chad Kerner, Senior Storage Engineer
Storage Enabling Technologies
National Center for Supercomputing Applications
ckerner@illinois.edu     chad.kerner@gmail.com

This command line interface was to make it easy to modify the ACLs. And it
becomes more trivial with the python class to handle it.

There is NO support, use it at your own risk.  Although I have not coded
anything too awfully dramatic in here.

If you find a bug, fix it.  Then send me the diff and I will merge it into
the code.

You may want to pull often because this is being updated quite frequently as
our needs arise in our clusters.
"""

from __future__ import print_function
import sys
import os
import tempfile
from stat import *
import pprint
from ssacl import *

# Default ACL dict
default_acl = {}
default_acl['USERP'] = 'rwxc'
default_acl['GROUPP'] = 'r-x-'
default_acl['OTHERP'] = '----'
default_acl['MASK'] = 'rwxc'
default_acl['USERS'] = {}
default_acl['GROUPS'] = {}

def parse_options( argv ):
    """
    This function handles the parsing of the command line arguments.

    Args:
      argv: A list of command line arguments, passed in from sys.argv

    Returns
      options: A dictionary of the command line option settings
      args   : A list of files

    """

    import argparse
    import textwrap
    parser = argparse.ArgumentParser(
           formatter_class = argparse.RawTextHelpFormatter,
           prog = 'ssacl',
           description = textwrap.dedent('''\
                ssacl - Modify ACLs In SpectrumScale

                This utility will allow you to easily manipulate the ACLs on files
                within IBM SpectrumScale.


           '''),

           epilog = textwrap.dedent('''\

                Usage Examples:

                - List the ACLs on a file
                > ssacl --list /data/acl/testfile

                - Set the ACL to the contents of a specified ACL file.
                > ssacl --set -f acl.testfile /data/acl/testfile

                - Add a user ACL to a file
                > ssacl --add -u ckerner -a='rwx-' /data/acl/testfile

                - Add a group ACL to a file
                > ssacl --add -g nfsnobody -a='r-x-' /data/acl/testfile

                - Clear the ACLs on a file
                > ssacl --clear /data/acl/testfile

                - Clear the ACLs on a file and reset the permissions to 760:
                > ssacl --clear -U=rwxc --GID=r-x- -O=---- /data/acl/testfile

                - Delete a user ACL to a file
                > ssacl --del -u ckerner /data/acl/testfile

                - Delete a group ACL to a file
                > ssacl --del -g nfsnobody /data/acl/testfile

                - Dump the ACLs in JSON format for use as a backup. If a directory is specified, the
                  default ACL for the directory is dumped as well.
                > ssacl --json /data/acl/testfile

                NOTE: This CLI requires IBM SpectrumScale to be installed in the default location.

                Chad Kerner - ckerner@illinois.edu
                Senior Storage Engineer, Storage Enabling Technologies
                National Center for Supercomputing Applications
                University of Illinois, Urbana-Champaign''')
           )

    parser.add_argument( "--list",
                         dest = "list",
                         default = False,
                         action = 'store_true',
                         help = "List the ACLs on a file or directory. Default: %(default)s")

    parser.add_argument( "--add",
                         dest = "add",
                         default = False,
                         action = 'store_true',
                         help = "Add an ACL to a file or directory. Default: %(default)s")

    parser.add_argument( "--set",
                         dest = "set",
                         default = False,
                         action = 'store_true',
                         help = "Overwrite the current ACL of a file or directory. Default: %(default)s")

    parser.add_argument( "--del",
                         dest = "delete",
                         default = False,
                         action = 'store_true',
                         help = "Delete the specified ACL from the file or directory. Default: %(default)s")

    parser.add_argument( "--clear",
                         dest = "clear",
                         default = False,
                         action = 'store_true',
                         help = "Clear all ACLs from a file or directory. Default: %(default)s")

    parser.add_argument( "--cleardefault",
                         dest = "cleardefault",
                         default = False,
                         action = 'store_true',
                         help = "Clear all default ACLs from a file or directory. Default: %(default)s")

    parser.add_argument( "-j", "--json",
                         dest = "json",
                         default = False,
                         action = 'store_true',
                         help = "Dump the ACLs in JSON format. Default: %(default)s")

    parser.add_argument( "-f",
                         dest = "acl_file",
                         default = None,
                         action = 'store',
                         help = "The filename of the ACL file you want to apply with the --set command. Default: %(default)s")

    parser.add_argument( "-u", "--uid",
                         dest = "uid",
                         default = None,
                         action = 'store',
                         help = "The UID for the ACL you want to add or remove. Default: %(default)s")

    parser.add_argument( "-g", "--gid",
                         dest = "gid",
                         default = None,
                         action = 'store',
                         help = "The GID for the ACL you want to add or remove. Default: %(default)s")

    parser.add_argument( "-a", "--acl",
                         dest = "acl_mask",
                         default = None,
                         action = 'store',
                         help = "The ACL mask you want to have applied. Default: %(default)s")

    parser.add_argument( "-U", "--UID",
                         dest = "user_mask",
                         default = False,
                         action = 'store',
                         help = "The ACL to apply for the OWNER of the file or directory. Default: %(default)s")

    parser.add_argument( "-G", "--GID",
                         dest = "group_mask",
                         default = False,
                         action = 'store',
                         help = "The ACL to apply for the GROUP of the file or directory. Default: %(default)s")

    parser.add_argument( "-O", "--OTHER",
                         dest = "other_mask",
                         default = False,
                         action = 'store',
                         help = "The ACL to apply for the OTHER of the file or directory. Default: %(default)s")

    parser.add_argument( "-m", "--mask",
                         dest = "mask",
                         default = 'rwxc',
                         action = 'store',
                         help = "The ACL mask to apply for all user and group ACLs. Default: %(default)s")

    parser.add_argument( "-r",
                         dest = "recursive",
                         default = False,
                         action = 'store_true',
                         help = "Apply the ACL to all files and/or directories recursively. Default: %(default)s")

    parser.add_argument( "-d", "--default",
                         dest = "default",
                         default = False,
                         action = 'store_true',
                         help = "Apply the ACL as a default to the files and/or directories. Default: %(default)s")

    parser.add_argument( "--file",
                         dest = "input_file",
                         default = None,
                         action = 'store',
                         help = "The name of a text file containing the file names, 1 per line, to modify. Default: %(default)s")

    parser.add_argument( "--dry-run",
                         dest = "dryrun",
                         default = False,
                         action = 'store_true',
                         help = "Execute in dry-run. Only display the commands to be executed. Default: %(default)s")

    parser.add_argument( "-q", "--quiet",
                         dest = "quiet",
                         default = False,
                         action = 'store_true',
                         help = "Execute in quiet mode. Default: %(default)s")

    parser.add_argument( "-v", "--verbose",
                         dest = "verbose",
                         default = False,
                         action = 'store_true',
                         help = "Execute in verbose mode. Default: %(default)s")

    parser.add_argument( "--debug",
                         dest = "debug",
                         default = False,
                         action = 'store_true',
                         help = "Execute in debug mode. This is pretty verbose. Default: %(default)s")

    options, args = parser.parse_known_args( argv )
    return ( options, args )

def get_temp_filename():
    """
    Use the tempfile module to generate unique temporary work filenames. (For the future when this gets
    to be parallelized.)
    """
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    tf = tempfile.NamedTemporaryFile()
    return tf.name

def get_os_stat( pathname ):
    if options.debug:
       print( "Trace: %s" % ( sys._getframe().f_code.co_name ) )

    try:
       mystat = os.stat( pathname )
       mode = mystat[ST_MODE]
    except:
       mystat = None
       if not options.quiet:
          print("Broken Link: %s " % ( pathname ) )
    return mystat

def walk_directory_tree( topdir, file_callback, directory_callback ):
    """
    This will recursively descend thru the directory tree rooted at the top
    and execute the specified callback routine for every entry.
    """
    if options.debug:
       print( "Trace: %s" % ( sys._getframe().f_code.co_name ) )

    for file in os.listdir( topdir ):
       pathname = os.path.join( topdir, file )
       mystat = get_os_stat( pathname )

       if mystat:
          mode = mystat[ST_MODE]
       else:
          continue

       if S_ISDIR(mode):
          if not pathname.endswith( '/.snapshots' ):
             directory_callback( pathname )
             if options.recursive:
                walk_directory_tree( pathname, file_callback, directory_callback )
       elif S_ISREG(mode):
          file_callback( pathname )
       else:
          print("Skipping: %s " % ( pathname ) )



def json_worker( filename ):
    """
    Fetch the file ACLs and return them in a dict.

    :param filename: The name of the file or directory to print the ACLs on in JSON format.
    :return: Nothing
    """

    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    myacl = mmacls( filename )
    if myacl.filename != None:
       print('ACL: %s' % ( return_json(myacl.acls) ) )
       if myacl.is_file == False:
          myacl.get_default_acl()
          print('DACL: %s' % ( return_json(myacl.default_acls) ) )
    else:
       print("FQPN: %s does not exist." % ( filename ))

def process_json_command():
    """
    A --json was specified, so lets dump the ACLs in JSON format.
    """
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    for filename in args:
	mystat = get_os_stat( filename )

	if mystat:
           mode = mystat[ST_MODE]
	else:
           continue

        if S_ISDIR(mode):
           json_worker( filename )
           walk_directory_tree( filename, json_worker, json_worker )
        else:
           json_worker( filename )

def list_worker( filename ):
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    myacl = mmacls( filename )
    if myacl.filename != None:
       print('File: %s' % ( myacl.filename ) )
       myacl.dump_raw_acl()
       if myacl.is_file == False:
          if options.default:
             print('Default ACL: %s' % ( myacl.dirname ) )
             myacl.get_default_acl()
             myacl.dump_raw_default_acl()
    else:
       print("FQPN: %s does not exist." % ( filename ))

def process_list_command():
    """
    A --list was specified, so lets dump the ACLs.
    """
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    for filename in args:
	mystat = get_os_stat( filename )

	if mystat:
           mode = mystat[ST_MODE]
	else:
           continue

        if S_ISDIR(mode):
           list_worker( filename )
           walk_directory_tree( filename, list_worker, list_worker )
        else:
           list_worker( filename )

def set_worker( filename ):
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    myacl = mmacls( filename )
    if myacl.filename != None:
       if options.verbose:
          print("Processing: %s setting ACL to file: %s" % ( myacl.filename, options.acl_file ))
       set_acl( myacl.filename, options.acl_file, options.dryrun, options.verbose )

       if myacl.is_file == False:
          if options.default:
             set_default_acl( myacl.filename, options.acl_file, options.dryrun, options.verbose )

def process_set_command():
    """
    A --set was specified, so lets set the ACLs.
    """
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    if options.acl_file == None:
       print("ERROR: ACL file not specified! \nUsage: ssacl --set -f <ACL File> [ FILE1, FILE2, ....]")
    elif os.path.isfile( os.path.abspath( options.acl_file )):
       for filename in args:
           mystat = get_os_stat( filename )

           if mystat:
              mode = mystat[ST_MODE]
           else:
               continue

           mode = mystat[ST_MODE]
           if S_ISDIR(mode):
              set_worker( filename )
              walk_directory_tree( filename, set_worker, set_worker )
           else:
              set_worker( filename )
    else:
       print("ERROR: ACL file: %s not found!" % ( options.acl_file ))

def clear_worker( filename ):
    """
    This is the worker function for clearing the ACLs.  It is called by the walk_directory_tree
    routine for the recursion.  This is also useful if the script is ever parallelized.
    """
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    myacl = mmacls( filename )
    if myacl.filename != None:
       # Was a new user mask specified. If so, update it.
       if options.user_mask:
          myacl.update_user_perms( options.user_mask )

       # Was a new group mask specified. If so, update it.
       if options.group_mask:
          myacl.update_group_perms( options.group_mask )

       # Was a new other mask specified. If so, update it.
       if options.other_mask:
          myacl.update_other_perms( options.other_mask )

       myacl.clear_acls()
       temp_acl_file = get_temp_filename()
       write_acl_file( temp_acl_file, myacl.acls, default_acl )
       set_acl( myacl.filename, temp_acl_file, options.dryrun, options.verbose )
       if options.default:
          myacl.get_default_acl()
          # Was a new user mask specified. If so, update it.
          if options.user_mask:
             myacl.update_default_user_perms( options.user_mask )

          # Was a new group mask specified. If so, update it.
          if options.group_mask:
             myacl.update_default_group_perms( options.group_mask )

          # Was a new other mask specified. If so, update it.
          if options.other_mask:
             myacl.update_default_other_perms( options.other_mask )

          myacl.clear_default_acls()
          temp_default_acl_file = get_temp_filename()
          write_acl_file( temp_default_acl_file, myacl.default_acls, default_acl )
          set_default_acl( myacl.dirname, temp_default_acl_file, options.dryrun, options.verbose )

def process_clear_command():
    """
    A --clear was specified, so lets clear out the ACLs.
    """
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    for filename in args:
        mystat = get_os_stat( filename )

        if mystat:
           mode = mystat[ST_MODE]
        else:
           continue

        mode = mystat[ST_MODE]
        if S_ISDIR(mode):
           clear_worker( filename )
           walk_directory_tree( filename, clear_worker, clear_worker )
        else:
           clear_worker( filename )

def add_worker( filename ):
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    myacl = mmacls( filename )
    if myacl.filename != None:

       if options.uid:
          myacl.add_user_acl( options.uid, options.acl_mask )
       if options.gid:
          myacl.add_group_acl( options.gid, options.acl_mask )

       temp_acl_file = get_temp_filename()
       write_acl_file( temp_acl_file, myacl.acls, default_acl )
       set_acl( myacl.filename, temp_acl_file, options.dryrun, options.verbose )

       if options.default:
          myacl.get_default_acl()
          if options.uid != None:
             myacl.add_default_user_acl( options.uid, options.acl_mask )
          if options.gid != None:
             myacl.add_default_group_acl( options.gid, options.acl_mask )

          temp_default_acl_file = get_temp_filename()
          write_acl_file( temp_default_acl_file, myacl.default_acls, default_acl )
          set_default_acl( myacl.dirname, temp_default_acl_file, options.dryrun, options.verbose )

def process_add_acl():
    """
    An --add was specified. Lets get to work.
    """
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    if options.acl_mask == None:
       print('ERROR: An ACL mask was not specified. \nUsage: ssacl --add ',
             '[ -u UID | -g GID ] -a=ACL [ FILE1, FILE2, ....]')
       sys.exit(1)

    if options.uid == None and options.gid == None:
       print('ERROR: Neither --uid or --gid was specified. \nUsage: ssacl --add ',
             '[ -u UID | -g GID ] -a=ACL [ FILE1, FILE2, ....]')
       sys.exit(1)

    for filename in args:
        mystat = get_os_stat( filename )

        if mystat:
           mode = mystat[ST_MODE]
        else:
           continue

        mode = mystat[ST_MODE]
        if S_ISDIR(mode):
           add_worker( filename )
           walk_directory_tree( filename, add_worker, add_worker )
        else:
           add_worker( filename )

def del_worker( filename ):
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    myacl = mmacls( filename )
    if myacl.filename != None:

       if options.uid != None:
          myacl.del_user_acl( options.uid )
       if options.gid != None:
          myacl.del_group_acl( options.gid )

       temp_acl_file = get_temp_filename()
       write_acl_file( temp_acl_file, myacl.acls, default_acl )
       set_acl( myacl.filename, temp_acl_file, options.dryrun, options.verbose )

       if options.default:
          myacl.get_default_acl()
          if options.uid != None:
             myacl.del_default_user_acl( options.uid )
          elif options.gid != None:
             myacl.del_default_group_acl( options.gid )

          temp_default_acl_file = get_temp_filename()
          write_acl_file( temp_default_acl_file, myacl.default_acls, default_acl )
          set_default_acl( myacl.dirname, temp_default_acl_file, options.dryrun, options.verbose )


def process_del_acl():
    """
    An --add was specified. Lets get to work.
    """
    if options.debug:
       print("Trace: %s" % ( sys._getframe().f_code.co_name ))

    if options.uid == None and options.gid == None:
       print('ERROR: Neither --uid or --gid was specified. \nUsage: ssacl --add ',
             '[ -u UID | -g GID ] -a=ACL [ FILE1, FILE2, ....]')
       sys.exit(1)

    for filename in args:
        mystat = get_os_stat( filename )

        if mystat:
           mode = mystat[ST_MODE]
        else:
           continue

        mode = mystat[ST_MODE]
        if S_ISDIR(mode):
           del_worker( filename )
           walk_directory_tree( filename, del_worker, del_worker )
        else:
           del_worker( filename )


if __name__ == '__main__':
   ( options, args ) = parse_options( sys.argv[1:] )

   if options.list:
      process_list_command()
   elif options.set:
      process_set_command()
   elif options.clear:
      process_clear_command()
   elif options.add:
      process_add_acl()
   elif options.delete:
      process_del_acl()
   elif options.json:
      process_json_command()


